
// Code generated by MockGen. DO NOT EDIT.
// Source: google.golang.org/grpc/balancer (interfaces: SubConn)
//
// Generated by this command:
//
//      mockgen google.golang.org/grpc/balancer SubConn
//

// Package mock_balancer is a generated GoMock package.
package mock_balancer

import (
        reflect "reflect"

        gomock "go.uber.org/mock/gomock"
        balancer "google.golang.org/grpc/balancer"
        resolver "google.golang.org/grpc/resolver"
)

// MockSubConn is a mock of SubConn interface.
type MockSubConn struct {
        ctrl     *gomock.Controller
        recorder *MockSubConnMockRecorder
        isgomock struct{}
}

// MockSubConnMockRecorder is the mock recorder for MockSubConn.
type MockSubConnMockRecorder struct {
        mock *MockSubConn
}

// NewMockSubConn creates a new mock instance.
func NewMockSubConn(ctrl *gomock.Controller) *MockSubConn {
        mock := &MockSubConn{ctrl: ctrl}
        mock.recorder = &MockSubConnMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubConn) EXPECT() *MockSubConnMockRecorder {
        return m.recorder
}

// Connect mocks base method.
func (m *MockSubConn) Connect() {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "Connect")
}

// Connect indicates an expected call of Connect.
func (mr *MockSubConnMockRecorder) Connect() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockSubConn)(nil).Connect))
}

// GetOrBuildProducer mocks base method.
func (m *MockSubConn) GetOrBuildProducer(arg0 balancer.ProducerBuilder) (balancer.Producer, func()) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetOrBuildProducer", arg0)
        ret0, _ := ret[0].(balancer.Producer)
        ret1, _ := ret[1].(func())
        return ret0, ret1
}

// GetOrBuildProducer indicates an expected call of GetOrBuildProducer.
func (mr *MockSubConnMockRecorder) GetOrBuildProducer(arg0 any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrBuildProducer", reflect.TypeOf((*MockSubConn)(nil).GetOrBuildProducer), arg0)
}

// RegisterHealthListener mocks base method.
func (m *MockSubConn) RegisterHealthListener(arg0 func(balancer.SubConnState)) {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "RegisterHealthListener", arg0)
}

// RegisterHealthListener indicates an expected call of RegisterHealthListener.
func (mr *MockSubConnMockRecorder) RegisterHealthListener(arg0 any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHealthListener", reflect.TypeOf((*MockSubConn)(nil).RegisterHealthListener), arg0)
}

// Shutdown mocks base method.
func (m *MockSubConn) Shutdown() {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockSubConnMockRecorder) Shutdown() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockSubConn)(nil).Shutdown))
}

// UpdateAddresses mocks base method.
func (m *MockSubConn) UpdateAddresses(arg0 []resolver.Address) {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "UpdateAddresses", arg0)
}

// UpdateAddresses indicates an expected call of UpdateAddresses.
func (mr *MockSubConnMockRecorder) UpdateAddresses(arg0 any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddresses", reflect.TypeOf((*MockSubConn)(nil).UpdateAddresses), arg0)
}

// enforceSubConnEmbedding mocks base method.
func (m *MockSubConn) enforceSubConnEmbedding() {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "enforceSubConnEmbedding")
}

// enforceSubConnEmbedding indicates an expected call of enforceSubConnEmbedding.
func (mr *MockSubConnMockRecorder) enforceSubConnEmbedding() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "enforceSubConnEmbedding", reflect.TypeOf((*MockSubConn)(nil).enforceSubConnEmbedding))
}